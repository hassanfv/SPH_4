
SOURCE: https://www.classes.cs.uchicago.edu/archive/2016/spring/12300-1/lab6.html

We'll now set up 4 MPI cluster on AWS by creating and configuring EC2 instances.

Here's what to do:

Go to the AWS management console, to the EC2 console within it, and to the Instances view within that.

Click Launch Instance

Choose the "Ubuntu" Machine.

Choose t2.micro, but don't click the blue button. Click Next instead. This allows us to do further customization.

Number of instances: 4. This allows us to make multiple identical instances at once. Click Next again instead of the blue button.

Click Next two more times.

Click "Add Rule".

Choose "All Traffic", and set the final field (the blank one under "0.0.0.0/0" to be "172.31.0.0/16". This allows the machines to talk
to each other fully, without firewall security protection between them. By specifying only that nodes within a certain (private-to-AWS)
address range can send the traffic, however, we are still protecting the nodes from the outside world; the only traffic allowed from it
is ssh traffic (as was already configure by default).

Now go ahead and launch the nodes.

Get back to the table showing the list of instances

Select the first instance and note its Public DNS. Also, note its Private IP (should be 172.31.x.x).

Select the second instance and also note its Public DNS and Private IP.

Do this for all the instances.

Log into the first instance: ssh -i aws_key_file.pem ubuntu@public-dns-1  (change "public-dns-1" appropriately.)
                           ex.: ssh -i four_ec2.pem ubuntu@ec2-3-70-29-130.eu-central-1.compute.amazonaws.com

Perform the following (substituting in actual IP addresses from earlier) to install and configure (the mpich version of) MPI and mpi4py:

sudo apt-get update
sudo apt-get install -y python3-mpi4py
sudo apt install python3-pip
pip3 install numpy
pip3 install numba

Note that the following IPs starting with 172.31. are the private IPs of the four instances.
Here, we create a file named "hosts" which contains all the four private IPs of the instances.
The instances will use the IPs listed here to communicate with each other.
echo 172.31.6.122 >> hosts
echo 172.31.4.51 >> hosts
echo 172.31.2.171 >> hosts
echo 172.31.14.171 >> hosts

Log in to the remaining three instances and do the same.

Now, we need to copy the :four_ec2.pem: file (i.e. the AWS key file) to all four instances. For example:
1) scp -i four_ec2.pem four_ec2.pem ubuntu@ec2-3-70-29-130.eu-central-1.compute.amazonaws.com:~/.ssh/id_rsa
2) scp -i four_ec2.pem four_ec2.pem ubuntu@ec2-18-185-211-162.eu-central-1.compute.amazonaws.com:~/.ssh/id_rsa
3) scp -i four_ec2.pem four_ec2.pem ubuntu@ec2-3-127-170-227.eu-central-1.compute.amazonaws.com:~/.ssh/id_rsa
4) scp -i four_ec2.pem four_ec2.pem ubuntu@ec2-3-71-96-180.eu-central-1.compute.amazonaws.com:~/.ssh/id_rsa

Now, ssh to instance-1 and do ssh private-ip-2 (e.g. ssh 172.31.4.51) and accept the host key.
Then do ssh private-ip-1 (e.g. 172.31.6.122)and accept the host key. Here, we are ssh-ing to 
instance-2 from instance-1 and agian from instance-2 to instance-1. By doing this and accepting
the keys, the two instances can have access to eachother without needing a password. So since 
we have four instances here therefore we need to do this for all possible pair instances. I will
do it below, so that the pattern can be easily seen:

Now that we are back in instance-1, do ssh private-ip-3 and accept the host key. Then from within
instance-3 do ssh private-ip-1 and accept the key.

Now that we are back again in instance-1, do ssh private-ip-4 and accept the key. Then from within
instance-4 do ssh private-ip-1 and accept the key.

Up until this point the connection between instance-1 and the other 3 instances are estabished. Now
we start to do the same for instances 2 with respect to instances 3, and 4. Do the following:

Now do ssh private-ip-2 (I guess it does not ask for the key since this connection has already been
established). Now from within instance-2 do ssh private-ip-3 and accept the key. Now from within
instance-3 do ssh private-ip-2 and accept the key. 

Now that we are back in instance-2, do ssh private-ip-4 and accept the key. Now from within 
instance-4 do ssh private-ip-4 and accept the key. Now the password-less connection from
instance-2 to instance-3 and 4 is established.

Now the only remaining connection is between instance 3 and 4. So, do ssh private-ip-3 (may not
need to accept the key). Now from within instance-3 do ssh private-ip-4 and accept the key. Now
from within instance-4 do ssh private-ip-4 and accept the key. 

CONGRATULATIONS ! Now all four instances can communicate with eachother without needing the password.

Now everything is ready to run the code:
We need to copy all files to all four instances. To do this we can follow this example:

1) scp -i four_ec2.pem libsx.py ubuntu@ec2-3-70-29-130.eu-central-1.compute.amazonaws.com:~/.
2) scp -i four_ec2.pem libsx.py ubuntu@ec2-18-185-211-162.eu-central-1.compute.amazonaws.com:~/.
3) scp -i four_ec2.pem libsx.py ubuntu@ec2-3-127-170-227.eu-central-1.compute.amazonaws.com:~/.
4) scp -i four_ec2.pem libsx.py ubuntu@ec2-3-71-96-180.eu-central-1.compute.amazonaws.com:~/.

Now that all the files are in the four instances (you also need to create the "Outputs" folder !)
we can run the following command from any of the four instances:

mpirun --hostfile hosts -np 4 python3.8 sph_mpi4.py

Depending on the number of cores in all four instances, we can change -np 4 to the total number
of cores in the four instances combined. For example, if each instance has 16 cores, then we
have:

mpirun --hostfile hosts -np 64 python3.8 sph_mpi4.py

